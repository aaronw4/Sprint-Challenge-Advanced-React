{"version":3,"sources":["components/Players.js","hooks/useDarkMode.js","hooks/useLocalStorage.js","components/Navbar.js","components/Graph.js","App.js","serviceWorker.js","index.js"],"names":["Players","props","className","data","map","info","key","id","name","country","useDarkMode","initialValue","useState","item","window","localStorage","getItem","JSON","parse","storedValue","setStoredValue","value","setItem","stringify","useLocalStorage","setValue","useEffect","document","querySelector","classList","add","remove","Navbar","darkMode","setDarkMode","onClick","e","preventDefault","Graph","x","players","y","searches","style","height","margin","option","title","text","textStyle","color","grid","bottom","tooltip","show","xAxis","type","axisLabel","interval","rotate","yAxis","series","App","state","fetch","then","res","json","console","log","setState","catch","err","this","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAsBeA,EApBC,SAACC,GAEb,OACI,6BACI,yBAAKC,UAAU,eACX,uBAAGA,UAAU,QAAb,QACA,uBAAGA,UAAU,QAAb,QACA,uBAAGA,UAAU,WAAb,YAEHD,EAAME,KAAKC,IAAI,SAAAC,GAAI,OAChB,yBAAKH,UAAU,QAAQI,IAAKD,EAAKE,IAC7B,uBAAGL,UAAU,QAAQG,EAAKE,GAAK,GAC/B,uBAAGL,UAAU,QAAQG,EAAKG,MAC1B,uBAAGN,UAAU,WAAWG,EAAKI,c,QCZpCC,EAAc,WAAO,IAAD,ECDF,SAACJ,EAAKK,GAAkB,IAAD,EACZC,mBAAS,WAC3C,IAAMC,EAAOC,OAAOC,aAAaC,QAAQV,GACzC,OAAOO,EAAOI,KAAKC,MAAML,GAAQF,IAHa,mBAC3CQ,EAD2C,KAC9BC,EAD8B,KAWlD,MAAO,CAACD,EALS,SAAAE,GACbD,EAAeC,GACfP,OAAOC,aAAaO,QAAQhB,EAAKW,KAAKM,UAAUF,MDN1BG,CAAgB,QADb,mBACtBH,EADsB,KACfI,EADe,KAW7B,OARAC,oBAAU,YACQ,IAAVL,EACAM,SAASC,cAAc,QAAQC,UAAUC,IAAI,aAE7CH,SAASC,cAAc,QAAQC,UAAUE,OAAO,cAEtD,CAACV,IAEI,CAACA,EAAOI,IEUJO,EArBA,WAAO,IAAD,EACetB,IADf,mBACVuB,EADU,KACAC,EADA,KAQjB,OACI,yBAAKhC,UAAU,OACX,+DACA,6BACA,4BACAiC,QAVW,SAAAC,GACfA,EAAEC,iBACFH,GAAaD,IAST/B,UAAW+B,EAAW,iBAAmB,c,kBCqCtCK,EAnDD,SAACrC,GACX,IAAIsC,EAAItC,EAAME,KAAKC,IAAI,SAAAoC,GAAO,OAC1BA,EAAQhC,OAGRiC,EAAIxC,EAAME,KAAKC,IAAI,SAAAoC,GAAO,OAC1BA,EAAQE,WAGZ,OACI,kBAAC,IAAD,CAAcxC,UAAU,QACpByC,MAAO,CACHC,OAAQ,QACRC,OAAQ,cAEZC,OAAQ,CACJC,MAAO,CACHC,KAAM,qCACNC,UAAW,CACPC,MAAO,SAGfC,KAAM,CACFC,OAAQ,KAEZH,UAAW,CACPC,MAAO,QAEXG,QAAS,CACLC,MAAM,GAEVC,MAAO,CACHC,KAAM,WACNrD,KAAMoC,EACNkB,UAAW,CACPC,SAAU,EACVC,OAAQ,KAGhBC,MAAO,CACHJ,KAAM,SAEVK,OAAQ,CAAC,CACL1D,KAAMsC,EACNe,KAAM,aCfXM,G,kNAzBbC,MAAQ,CACN5D,KAAM,I,mFAGa,IAAD,OAClB6D,MAAM,yDACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACFE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CAACnE,KAAM+D,MAExBK,MAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,O,+BAI1B,OACE,yBAAKtE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOC,KAAMsE,KAAKV,MAAM5D,OACxB,kBAAC,EAAD,CAASA,KAAMsE,KAAKV,MAAM5D,Y,GApBhBuE,IAAMC,YCMJC,QACW,cAA7B9D,OAAO+D,SAASC,UAEe,UAA7BhE,OAAO+D,SAASC,UAEhBhE,OAAO+D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStD,SAASuD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.45c0f457.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Players = (props) => {\r\n\r\n    return (        \r\n        <div>\r\n            <div className='lines title'>\r\n                <p className='rank'>Rank</p>\r\n                <p className='name'>Name</p>\r\n                <p className='country'>Country</p>\r\n            </div>\r\n            {props.data.map(info => (\r\n                <div className='lines' key={info.id}>\r\n                    <p className='rank'>{info.id + 1}</p>\r\n                    <p className='name'>{info.name}</p>\r\n                    <p className='country'>{info.country}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Players;\r\n","import {useEffect} from 'react';\r\nimport {useLocalStorage} from './useLocalStorage';\r\n\r\nexport const useDarkMode = () => {\r\n    const [value, setValue] = useLocalStorage('dark');\r\n\r\n    useEffect(() => {\r\n        if (value === true) {\r\n            document.querySelector('body').classList.add(\"dark-mode\");\r\n        } else {   \r\n            document.querySelector('body').classList.remove('dark-mode');\r\n        }\r\n    },[value])\r\n\r\n    return([value, setValue])\r\n}\r\n","import {useState} from 'react';\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n        const item = window.localStorage.getItem(key);\r\n        return item ? JSON.parse(item) : initialValue;\r\n    });\r\n\r\n    const setValue = value => {\r\n        setStoredValue(value);\r\n        window.localStorage.setItem(key, JSON.stringify(value));\r\n    };\r\n\r\n    return [storedValue, setValue];\r\n}\r\n","import React from 'react';\r\nimport {useDarkMode} from '../hooks/useDarkMode';\r\n\r\nconst Navbar = () => {\r\n    const [darkMode, setDarkMode] = useDarkMode(false);\r\n\r\n    const toggleMode = e => {\r\n        e.preventDefault();\r\n        setDarkMode(!darkMode);\r\n    };\r\n\r\n    return (\r\n        <nav className='nav'>\r\n            <h1>Top Searches: Women's World Cup</h1> \r\n            <div>\r\n            <button\r\n            onClick={toggleMode}\r\n            className={darkMode ? 'toggle toggled' : 'toggle'}\r\n            /> \r\n            </div>        \r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import ReactEcharts from 'echarts-for-react';\r\nimport React from 'react';\r\n\r\nconst Graph = (props) => {\r\n    var x = props.data.map(players => (\r\n        players.name\r\n    ))\r\n\r\n    var y = props.data.map(players => (\r\n        players.searches\r\n    ))\r\n\r\n    return(\r\n        <ReactEcharts className='chart'\r\n            style={{\r\n                height: '600px',\r\n                margin: '20px 0 0 0'\r\n            }}\r\n            option={{\r\n                title: {\r\n                    text: 'Number of Searches for Each Player',\r\n                    textStyle: {\r\n                        color: 'grey'\r\n                    }\r\n                },\r\n                grid: {\r\n                    bottom: 200\r\n                },\r\n                textStyle: {\r\n                    color: 'grey'\r\n                },\r\n                tooltip: {\r\n                    show: true\r\n                },\r\n                xAxis: {\r\n                    type: 'category',\r\n                    data: x,\r\n                    axisLabel: {\r\n                        interval: 0,\r\n                        rotate: 55\r\n                    }\r\n                },\r\n                yAxis: {\r\n                    type: 'value',\r\n                },\r\n                series: [{\r\n                    data: y,\r\n                    type: 'line'\r\n                }]\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Graph\r\n","import React from 'react';\r\nimport Players from './components/Players';\r\nimport Navbar from './components/Navbar';\r\nimport Graph from './components/Graph';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: []\r\n  }\r\n  \r\n  componentDidMount() {\r\n    fetch(`https://arw-player-database.herokuapp.com/api/players`)\r\n    .then(res => res.json())\r\n    .then(res => {\r\n        console.log(res);\r\n        this.setState({data: res})\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar/>\r\n        <Graph data={this.state.data}/>\r\n        <Players data={this.state.data}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}